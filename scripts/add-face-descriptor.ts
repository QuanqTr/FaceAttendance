import 'dotenv/config';
import { db } from '../server/db';
import { employees } from '../shared/schema';
import { eq } from 'drizzle-orm';

// Face descriptor m·∫´u (128 s·ªë th·ª±c)
const sampleFaceDescriptor = [
    0.1234, -0.5678, 0.9012, -0.3456, 0.7890, -0.1234, 0.5678, -0.9012,
    0.3456, -0.7890, 0.1234, -0.5678, 0.9012, -0.3456, 0.7890, -0.1234,
    0.5678, -0.9012, 0.3456, -0.7890, 0.1234, -0.5678, 0.9012, -0.3456,
    0.7890, -0.1234, 0.5678, -0.9012, 0.3456, -0.7890, 0.1234, -0.5678,
    0.9012, -0.3456, 0.7890, -0.1234, 0.5678, -0.9012, 0.3456, -0.7890,
    0.1234, -0.5678, 0.9012, -0.3456, 0.7890, -0.1234, 0.5678, -0.9012,
    0.3456, -0.7890, 0.1234, -0.5678, 0.9012, -0.3456, 0.7890, -0.1234,
    0.5678, -0.9012, 0.3456, -0.7890, 0.1234, -0.5678, 0.9012, -0.3456,
    0.7890, -0.1234, 0.5678, -0.9012, 0.3456, -0.7890, 0.1234, -0.5678,
    0.9012, -0.3456, 0.7890, -0.1234, 0.5678, -0.9012, 0.3456, -0.7890,
    0.1234, -0.5678, 0.9012, -0.3456, 0.7890, -0.1234, 0.5678, -0.9012,
    0.3456, -0.7890, 0.1234, -0.5678, 0.9012, -0.3456, 0.7890, -0.1234,
    0.5678, -0.9012, 0.3456, -0.7890, 0.1234, -0.5678, 0.9012, -0.3456,
    0.7890, -0.1234, 0.5678, -0.9012, 0.3456, -0.7890, 0.1234, -0.5678,
    0.9012, -0.3456, 0.7890, -0.1234, 0.5678, -0.9012, 0.3456, -0.7890,
    0.1234, -0.5678, 0.9012, -0.3456, 0.7890, -0.1234, 0.5678, -0.9012
];

async function addFaceDescriptor() {
    try {
        console.log('üîç ƒêang t√¨m nh√¢n vi√™n ƒë·ªÉ th√™m face descriptor...');

        // L·∫•y t·∫•t c·∫£ nh√¢n vi√™n
        const allEmployees = await db.select().from(employees);
        console.log(`üìä T√¨m th·∫•y ${allEmployees.length} nh√¢n vi√™n`);

        if (allEmployees.length === 0) {
            console.log('‚ùå Kh√¥ng c√≥ nh√¢n vi√™n n√†o trong database');

            // T·∫°o nh√¢n vi√™n test
            console.log('üîß T·∫°o nh√¢n vi√™n test...');
            const [newEmployee] = await db.insert(employees).values({
                employeeId: 'EMP001',
                firstName: 'Nguy·ªÖn',
                lastName: 'VƒÉn A',
                email: 'test@company.com',
                phone: '0123456789',
                position: 'Nh√¢n vi√™n',
                status: 'active'
            }).returning();

            console.log(`‚úÖ ƒê√£ t·∫°o nh√¢n vi√™n: ${newEmployee.firstName} ${newEmployee.lastName} (ID: ${newEmployee.id})`);

            // Th√™m face descriptor cho nh√¢n vi√™n m·ªõi
            await db.update(employees)
                .set({ faceDescriptor: JSON.stringify(sampleFaceDescriptor) })
                .where(eq(employees.id, newEmployee.id));

            console.log(`üéØ ƒê√£ th√™m face descriptor cho nh√¢n vi√™n ${newEmployee.firstName} ${newEmployee.lastName}`);
        } else {
            // L·∫•y nh√¢n vi√™n ƒë·∫ßu ti√™n ch∆∞a c√≥ face descriptor
            const employeeWithoutFace = allEmployees.find(emp => !emp.faceDescriptor);

            if (employeeWithoutFace) {
                console.log(`üéØ Th√™m face descriptor cho nh√¢n vi√™n: ${employeeWithoutFace.firstName} ${employeeWithoutFace.lastName}`);

                await db.update(employees)
                    .set({ faceDescriptor: JSON.stringify(sampleFaceDescriptor) })
                    .where(eq(employees.id, employeeWithoutFace.id));

                console.log(`‚úÖ ƒê√£ th√™m face descriptor cho nh√¢n vi√™n ${employeeWithoutFace.firstName} ${employeeWithoutFace.lastName}`);
            } else {
                console.log('‚ÑπÔ∏è T·∫•t c·∫£ nh√¢n vi√™n ƒë√£ c√≥ face descriptor');

                // Hi·ªÉn th·ªã danh s√°ch nh√¢n vi√™n c√≥ face descriptor
                const employeesWithFace = allEmployees.filter(emp => emp.faceDescriptor);
                console.log(`üìã Nh√¢n vi√™n c√≥ face descriptor:`);
                employeesWithFace.forEach(emp => {
                    console.log(`  - ${emp.firstName} ${emp.lastName} (ID: ${emp.id})`);
                });
            }
        }

        // Ki·ªÉm tra k·∫øt qu·∫£
        const updatedEmployees = await db.select().from(employees);
        const withFace = updatedEmployees.filter(emp => emp.faceDescriptor);
        console.log(`\nüìä K·∫øt qu·∫£: ${withFace.length}/${updatedEmployees.length} nh√¢n vi√™n c√≥ face descriptor`);

        console.log('\nüéâ Ho√†n th√†nh! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ test face recognition.');

    } catch (error) {
        console.error('‚ùå L·ªói:', error);
    }
}

addFaceDescriptor().then(() => {
    process.exit(0);
}).catch(error => {
    console.error('‚ùå Script error:', error);
    process.exit(1);
}); 