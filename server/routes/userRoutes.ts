import { Express } from "express";
import { ensureAuthenticated, ensureAdmin } from "../middlewares/auth";
import {
    getAllUsers,
    getAllAccounts,
    getUser,
    createUser,
    updateUser,
    updateUserPassword,
    deleteUser,
    getUserFaceProfile,
    updateUserFaceProfile,
    deleteUserFaceProfile
} from "../controllers/userController";
import { db } from "../db";
import { employees, attendanceSummary, leaveRequests, departments, workHours } from "@shared/schema";
import { eq, and, sql } from "drizzle-orm";
import { storage } from "../models/storage";
import nodemailer from 'nodemailer';

// User Face OTP Store - t·∫°m th·ªùi d√πng memory, n√™n chuy·ªÉn sang Redis
const userFaceOtpStore = new Map<string, {
    code: string;
    email: string;
    employeeId: number;
    userId: number;
    expiresAt: Date;
    attempts: number;
}>();

// H√†m g·ª≠i email x√°c th·ª±c cho User Face Profile
async function sendUserFaceAuthEmail(email: string, otpCode: string, fullName: string): Promise<void> {
    try {
        console.log("Setting up user face auth email transporter...");

        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.GMAIL_USER || 'mynameisquanq@gmail.com',
                pass: process.env.GMAIL_APP_PASSWORD || 'aixk pfwa xfin uswp'
            }
        });

        console.log("User face auth email transporter created successfully");

        const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; }
                .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                .header { background-color: #059669; color: white; padding: 20px; text-align: center; }
                .content { padding: 20px; background-color: #f8fafc; }
                .code-box { background-color: #ffffff; border: 2px solid #059669; padding: 20px; margin: 20px 0; text-align: center; border-radius: 8px; }
                .code { font-size: 32px; font-weight: bold; color: #059669; letter-spacing: 4px; font-family: monospace; }
                .warning { background-color: #fef3c7; border-left: 4px solid #f59e0b; padding: 10px; margin: 15px 0; }
                .footer { text-align: center; color: #6b7280; font-size: 12px; margin-top: 20px; }
                .user-badge { background-color: #10b981; color: white; padding: 4px 12px; border-radius: 16px; font-size: 12px; display: inline-block; margin: 5px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üë§ FaceAttend - M√£ x√°c th·ª±c User</h1>
                    <div class="user-badge">USER PROFILE ACCESS</div>
                </div>
                <div class="content">
                    <h2>Xin ch√†o ${fullName},</h2>
                    
                    <p>B·∫°n ƒë√£ y√™u c·∫ßu truy c·∫≠p v√†o t√≠nh nƒÉng c·∫≠p nh·∫≠t d·ªØ li·ªáu khu√¥n m·∫∑t c√° nh√¢n.</p>
                    
                    <div class="code-box">
                        <p><strong>M√£ x√°c th·ª±c c·ªßa b·∫°n l√†:</strong></p>
                        <div class="code">${otpCode}</div>
                    </div>
                    
                    <div class="warning">
                        <h3>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</h3>
                        <ul>
                            <li>M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong></li>
                            <li>Ch·ªâ s·ª≠ d·ª•ng m·ªôt l·∫ßn</li>
                            <li>Ch·ªâ d√†nh cho vi·ªác c·∫≠p nh·∫≠t d·ªØ li·ªáu khu√¥n m·∫∑t c√° nh√¢n</li>
                            <li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                            <li>Sau khi x√°c th·ª±c, b·∫°n c√≥ quy·ªÅn c·∫≠p nh·∫≠t trong 15 ph√∫t</li>
                        </ul>
                    </div>
                    
                    <p>V·ªõi x√°c th·ª±c n√†y, b·∫°n c√≥ th·ªÉ:</p>
                    <ul>
                        <li>‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu khu√¥n m·∫∑t cho ch·∫•m c√¥ng</li>
                        <li>‚úÖ Qu·∫£n l√Ω th√¥ng tin nh·∫≠n di·ªán c√° nh√¢n</li>
                        <li>‚úÖ ƒê·∫£m b·∫£o t√≠nh b·∫£o m·∫≠t c·ªßa d·ªØ li·ªáu sinh tr·∫Øc h·ªçc</li>
                    </ul>
                    
                    <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y v√† li√™n h·ªá IT Department.</p>
                    
                    <div class="footer">
                        <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng FaceAttend.<br>
                        Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.</p>
                        <p>¬© 2024 FaceAttend - H·ªá th·ªëng ch·∫•m c√¥ng nh·∫≠n di·ªán khu√¥n m·∫∑t</p>
                        <p><strong>User Portal</strong> | Personal Profile Management</p>
                    </div>
                </div>
            </div>
        </body>
        </html>
        `;

        const mailOptions = {
            from: {
                name: 'FaceAttend User System',
                address: process.env.GMAIL_USER || 'mynameisquanq@gmail.com'
            },
            to: email,
            subject: `üë§ [FaceAttend] M√£ x√°c th·ª±c User Profile - ${otpCode}`,
            html: htmlContent,
            text: `
Xin ch√†o ${fullName},

M√£ x√°c th·ª±c User Profile c·ªßa b·∫°n l√†: ${otpCode}

M√£ n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t v√† ch·ªâ s·ª≠ d·ª•ng m·ªôt l·∫ßn.
D√†nh cho vi·ªác c·∫≠p nh·∫≠t d·ªØ li·ªáu khu√¥n m·∫∑t c√° nh√¢n.

Sau khi x√°c th·ª±c, b·∫°n c√≥ quy·ªÅn c·∫≠p nh·∫≠t trong 15 ph√∫t.

N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y.

Tr√¢n tr·ªçng,
FaceAttend User System
            `
        };

        console.log("Sending user face auth email to:", email);
        const info = await transporter.sendMail(mailOptions);
        console.log("User face auth email sent successfully!");
        console.log("Message ID:", info.messageId);

    } catch (error) {
        console.error("Error sending user face auth email:", error);
        throw new Error(`Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c User: ${(error as Error).message}`);
    }
}

export function userRoutes(app: Express) {
    // User endpoints

    // Get all users
    app.get("/api/users", ensureAuthenticated, getAllUsers);

    // Get all accounts (alias for users)
    app.get("/api/accounts", ensureAuthenticated, getAllAccounts);

    // Get user by ID
    app.get("/api/users/:id", ensureAuthenticated, getUser);

    // Create new user
    app.post("/api/users", ensureAuthenticated, createUser);

    // Update user
    app.put("/api/users/:id", ensureAuthenticated, updateUser);

    // Update user password
    app.put("/api/users/:id/password", ensureAuthenticated, updateUserPassword);
    app.patch("/api/users/:id/password", ensureAuthenticated, updateUserPassword);

    // Delete user
    app.delete("/api/users/:id", ensureAuthenticated, deleteUser);

    // Face profile endpoints
    app.get("/api/users/:id/face-profile", ensureAuthenticated, getUserFaceProfile);
    app.post("/api/users/:id/face-profile", ensureAuthenticated, updateUserFaceProfile);
    app.delete("/api/users/:id/face-profile", ensureAuthenticated, deleteUserFaceProfile);

    // Get all departments (for profile dropdown)
    app.get("/api/departments", ensureAuthenticated, async (req, res) => {
        try {
            const departmentsList = await db.select().from(departments);
            res.json(departmentsList);
        } catch (error) {
            console.error('Error fetching departments:', error);
            res.status(500).json({ error: 'Failed to fetch departments' });
        }
    });

    // Employee attendance endpoints for users

    // Get attendance status for today
    app.get("/api/attendance/employee/:employeeId/status", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const date = req.query.date as string || new Date().toISOString().split('T')[0];

            // Mock response - replace with actual implementation
            res.json({
                hasCheckedIn: false,
                hasCheckedOut: false,
                checkInTime: null,
                checkOutTime: null,
                status: 'absent',
                workHours: 0,
                expectedWorkHours: 8,
                isWorkingDay: true
            });
        } catch (error) {
            console.error('Error fetching attendance status:', error);
            res.status(500).json({ error: 'Failed to fetch attendance status' });
        }
    });

    // Get recent attendance records
    app.get("/api/attendance/employee/:employeeId/recent", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const limit = parseInt(req.query.limit as string) || 5;

            // Mock response - replace with actual implementation
            res.json([]);
        } catch (error) {
            console.error('Error fetching recent attendance:', error);
            res.status(500).json({ error: 'Failed to fetch recent attendance' });
        }
    });

    // Get work hours
    app.get("/api/attendance/employee/:employeeId/work-hours", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const { start, end } = req.query;

            // Mock response - replace with actual implementation
            res.json([]);
        } catch (error) {
            console.error('Error fetching work hours:', error);
            res.status(500).json({ error: 'Failed to fetch work hours' });
        }
    });

    // Get work hours stats
    app.get("/api/attendance/employee/:employeeId/work-hours/stats", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const { start, end } = req.query;

            // Mock response - replace with actual implementation
            res.json({
                totalHours: 0,
                totalOvertime: 0,
                averageHours: 0,
                targetHours: 160,
                attendance: 0,
                lateCount: 0,
                earlyOutCount: 0
            });
        } catch (error) {
            console.error('Error fetching work hours stats:', error);
            res.status(500).json({ error: 'Failed to fetch work hours stats' });
        }
    });

    // Get attendance stats for employee (for dashboard) - USING REAL DATABASE
    app.get("/api/attendance/stats/employee/:employeeId", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const month = parseInt(req.query.month as string) || new Date().getMonth() + 1;
            const year = parseInt(req.query.year as string) || new Date().getFullYear();

            console.log(`[UserRoutes] Getting attendance stats for employee ${employeeId}, month ${month}, year ${year}`);

            // L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng attendance_summary
            const summaryData = await db
                .select()
                .from(attendanceSummary)
                .where(and(
                    eq(attendanceSummary.employeeId, employeeId),
                    eq(attendanceSummary.month, month),
                    eq(attendanceSummary.year, year)
                ));

            if (summaryData.length === 0) {
                console.log(`[UserRoutes] No attendance summary found for employee ${employeeId}`);
                // Return default values if no data found
                res.json({
                    workingDays: 0,
                    present: 0,
                    absent: 0,
                    late: 0,
                    leave: 0,
                    earlyOut: 0,
                    totalHours: 0,
                    overtimeHours: 0,
                    averageHours: 0,
                    attendanceRate: 0,
                    punctualityRate: 0
                });
                return;
            }

            const summary = summaryData[0];
            console.log(`[UserRoutes] Found attendance summary:`, summary);

            // T√≠nh to√°n t·ª´ d·ªØ li·ªáu c√≥ s·∫µn
            const workingDays = 22; // Default working days in a month
            const totalHours = parseFloat(summary.totalHours?.toString() || '0');
            const overtimeHours = parseFloat(summary.overtimeHours?.toString() || '0');
            const leaveDays = summary.leaveDays || 0;
            const lateMinutes = summary.lateMinutes || 0;
            const earlyMinutes = summary.earlyMinutes || 0;

            // T√≠nh to√°n present days t·ª´ total hours (gi·∫£ ƒë·ªãnh 8h/ng√†y)
            const workDays = Math.ceil(totalHours / 8);
            // T√≠nh late days t·ª´ late minutes (m·ªói 15 ph√∫t mu·ªôn = 1 ng√†y mu·ªôn)
            const lateDays = lateMinutes > 0 ? Math.ceil(lateMinutes / 60) : 0; // 1 gi·ªù mu·ªôn = 1 ng√†y mu·ªôn
            // Present days = work days - late days
            const presentDays = Math.max(0, workDays - lateDays);
            // Absent days = working days - work days - leave days
            const absentDays = Math.max(0, workingDays - workDays - leaveDays);

            // Calculate rates
            const totalAttendanceDays = workDays + leaveDays;
            const attendanceRate = workingDays > 0 ? (totalAttendanceDays / workingDays) * 100 : 0;
            const punctualityRate = workDays > 0 ? (presentDays / workDays) * 100 : 0;
            const averageHours = workDays > 0 ? totalHours / workDays : 0;

            res.json({
                workingDays: workingDays,
                present: presentDays,
                absent: absentDays,
                late: lateDays,
                leave: leaveDays,
                earlyOut: earlyMinutes > 0 ? Math.ceil(earlyMinutes / 60) : 0,
                totalHours: totalHours,
                overtimeHours: overtimeHours,
                averageHours: Math.round(averageHours * 10) / 10,
                attendanceRate: Math.round(attendanceRate * 10) / 10,
                punctualityRate: Math.round(punctualityRate * 10) / 10
            });
        } catch (error) {
            console.error('Error fetching attendance stats:', error);
            res.status(500).json({ error: 'Failed to fetch attendance stats' });
        }
    });

    // Get employee attendance for specific date
    app.get("/api/attendance/employee/:employeeId/date/:date", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const date = req.params.date;

            console.log(`[UserRoutes] Getting attendance for employee ${employeeId} on date ${date}`);

            // L·∫•y work hours cho ng√†y c·ª• th·ªÉ t·ª´ database
            const workHoursData = await db
                .select()
                .from(workHours)
                .where(and(
                    eq(workHours.employeeId, employeeId),
                    sql`DATE(${workHours.workDate}) = DATE(${date})`
                ));

            if (workHoursData.length === 0) {
                console.log(`[UserRoutes] No work hours found for employee ${employeeId} on ${date}`);
                return res.status(404).json({ message: 'No attendance record found for this date' });
            }

            const workHour = workHoursData[0];
            console.log(`[UserRoutes] Found work hours:`, workHour);

            res.json({
                id: workHour.id,
                employeeId: employeeId,
                date: date,
                checkIn: workHour.firstCheckin,
                checkOut: workHour.lastCheckout,
                status: workHour.status || 'present',
                workHours: parseFloat(workHour.regularHours?.toString() || '0'),
                overtimeHours: parseFloat(workHour.otHours?.toString() || '0'),
                notes: null
            });
        } catch (error) {
            console.error('Error fetching attendance by date:', error);
            res.status(500).json({ error: 'Failed to fetch attendance by date' });
        }
    });

    // Get employee daily attendance data for chart (monthly view)
    app.get("/api/attendance/employee/:employeeId/daily", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const month = parseInt(req.query.month as string) || new Date().getMonth() + 1;
            const year = parseInt(req.query.year as string) || new Date().getFullYear();

            console.log(`[UserRoutes] Getting daily attendance for employee ${employeeId}, month ${month}, year ${year}`);

            // T·∫°o ng√†y ƒë·∫ßu v√† cu·ªëi th√°ng
            const startDate = new Date(year, month - 1, 1);
            const endDate = new Date(year, month, 0);

            console.log(`[UserRoutes] Date range: ${startDate.toISOString().split('T')[0]} to ${endDate.toISOString().split('T')[0]}`);

            // L·∫•y d·ªØ li·ªáu work hours cho th√°ng
            const workHoursData = await db
                .select()
                .from(workHours)
                .where(and(
                    eq(workHours.employeeId, employeeId),
                    sql`${workHours.workDate} >= ${startDate.toISOString().split('T')[0]}`,
                    sql`${workHours.workDate} <= ${endDate.toISOString().split('T')[0]}`
                ))
                .orderBy(workHours.workDate);

            console.log(`[UserRoutes] Found ${workHoursData.length} work hours records`);

            // T·∫°o m·∫£ng t·∫•t c·∫£ c√°c ng√†y trong th√°ng
            const daysInMonth = [];
            for (let day = 1; day <= endDate.getDate(); day++) {
                const currentDate = new Date(year, month - 1, day);
                const dateStr = currentDate.toISOString().split('T')[0];

                // T√¨m d·ªØ li·ªáu work hours cho ng√†y n√†y
                const dayData = workHoursData.find(wh =>
                    wh.workDate && new Date(wh.workDate).toISOString().split('T')[0] === dateStr
                );

                daysInMonth.push({
                    date: `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}`,
                    fullDate: dateStr,
                    attendance: dayData ? 1 : 0, // 1 n·∫øu c√≥ ch·∫•m c√¥ng, 0 n·∫øu kh√¥ng
                    hours: dayData ? parseFloat(dayData.regularHours?.toString() || '0') : 0,
                    overtimeHours: dayData ? parseFloat(dayData.otHours?.toString() || '0') : 0,
                    status: dayData?.status || 'absent',
                    checkIn: dayData?.firstCheckin || null,
                    checkOut: dayData?.lastCheckout || null
                });
            }

            console.log(`[UserRoutes] Returning ${daysInMonth.length} days of data`);

            res.json(daysInMonth);
        } catch (error) {
            console.error('Error fetching daily attendance:', error);
            res.status(500).json({ error: 'Failed to fetch daily attendance' });
        }
    });

    // Get employee leave requests - USING REAL DATABASE
    app.get("/api/leave-requests/employee/:employeeId", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const { status, limit } = req.query;
            const userId = req.user?.id;

            if (!userId) {
                return res.status(401).json({ error: 'Not authenticated' });
            }

            console.log(`[UserRoutes] Getting leave requests for employee ${employeeId}, status: ${status}`);

            // Ki·ªÉm tra quy·ªÅn truy c·∫≠p - ch·ªâ cho ph√©p nh√¢n vi√™n xem leave request c·ªßa ch√≠nh h·ªç
            const currentEmployee = await storage.getEmployeeByUserId(userId);
            if (!currentEmployee) {
                return res.status(404).json({ error: 'Employee not found' });
            }

            // Check if user is admin/manager or requesting their own data
            const user = await storage.getUser(userId);
            const isManager = user?.role === 'admin' || user?.role === 'manager';

            if (!isManager && currentEmployee.id !== employeeId) {
                return res.status(403).json({ error: 'Unauthorized. You can only view your own leave requests' });
            }

            // L·∫•y leave requests t·ª´ database
            const leaveRequestsData = await storage.getEmployeeLeaveRequests(employeeId, status as string);

            // Th√™m t√≠nh to√°n s·ªë ng√†y cho m·ªói request
            const enrichedRequests = leaveRequestsData.map(request => {
                const startDate = new Date(request.startDate);
                const endDate = new Date(request.endDate);
                const days = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;

                return {
                    ...request,
                    days
                };
            });

            console.log(`[UserRoutes] Found ${enrichedRequests.length} leave requests for employee ${employeeId}`);
            res.json(enrichedRequests);
        } catch (error) {
            console.error('Error fetching leave requests:', error);
            res.status(500).json({ error: 'Failed to fetch leave requests' });
        }
    });

    // Get employee profile (for employees to access their own profile)
    app.get("/api/employees/profile/:employeeId", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);

            console.log(`[UserRoutes] Getting profile for employee ${employeeId}`);

            // L·∫•y th√¥ng tin nh√¢n vi√™n t·ª´ database
            const employee = await storage.getEmployee(employeeId);
            if (!employee) {
                return res.status(404).json({ error: 'Employee not found' });
            }

            // L·∫•y th√¥ng tin ph√≤ng ban n·∫øu c√≥
            let department = null;
            if (employee.departmentId) {
                department = await storage.getDepartment(employee.departmentId);
            }

            console.log(`[UserRoutes] Found employee:`, employee);

            res.json({
                id: employee.id,
                employeeId: employee.employeeId,
                firstName: employee.firstName,
                lastName: employee.lastName,
                email: employee.email,
                phone: employee.phone,
                position: employee.position,
                departmentId: employee.departmentId,
                department: department ? {
                    id: department.id,
                    name: department.name,
                    description: department.description
                } : null,
                birthDate: null,
                joinDate: employee.joinDate,
                hireDate: employee.joinDate,
                status: employee.status,
                avatar: null,
                avatarUrl: null
            });
        } catch (error) {
            console.error('Error fetching employee profile:', error);
            res.status(500).json({ error: 'Failed to fetch employee profile' });
        }
    });

    // Update employee profile (for employees to update their own profile)
    app.put("/api/employees/profile/:employeeId", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const { email, phone, position, departmentId } = req.body;

            console.log(`[UserRoutes] Updating profile for employee ${employeeId}`, { email, phone, position, departmentId });

            // C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n trong database
            const updatedEmployee = await storage.updateEmployee(employeeId, {
                email: email,
                phone: phone,
                position: position,
                departmentId: departmentId
            });

            if (!updatedEmployee) {
                return res.status(404).json({ error: 'Employee not found' });
            }

            // L·∫•y th√¥ng tin ph√≤ng ban m·ªõi n·∫øu c√≥
            let department = null;
            if (updatedEmployee.departmentId) {
                department = await storage.getDepartment(updatedEmployee.departmentId);
            }

            console.log(`[UserRoutes] Updated employee profile:`, updatedEmployee);

            res.json({
                id: updatedEmployee.id,
                employeeId: updatedEmployee.employeeId,
                firstName: updatedEmployee.firstName,
                lastName: updatedEmployee.lastName,
                email: updatedEmployee.email,
                phone: updatedEmployee.phone,
                position: updatedEmployee.position,
                departmentId: updatedEmployee.departmentId,
                department: department ? {
                    id: department.id,
                    name: department.name,
                    description: department.description
                } : null,
                birthDate: null,
                joinDate: updatedEmployee.joinDate,
                hireDate: updatedEmployee.joinDate,
                status: updatedEmployee.status,
                avatar: null,
                avatarUrl: null
            });
        } catch (error) {
            console.error('Error updating employee profile:', error);
            res.status(500).json({ error: 'Failed to update employee profile' });
        }
    });

    // Upload employee avatar
    app.post("/api/employees/:employeeId/avatar", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);

            // Mock response - replace with actual file upload implementation
            res.json({
                success: true,
                avatarUrl: `/avatars/employee-${employeeId}.jpg`,
                message: 'Avatar uploaded successfully'
            });
        } catch (error) {
            console.error('Error uploading avatar:', error);
            res.status(500).json({ error: 'Failed to upload avatar' });
        }
    });

    // Employee reports endpoints

    // Get attendance report
    app.get("/api/reports/employee/:employeeId/attendance", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const month = req.query.month as string;

            // Mock response - replace with actual implementation
            res.json({
                totalWorkingDays: 22,
                presentDays: 20,
                absentDays: 2,
                lateDays: 1,
                earlyOutDays: 0,
                attendanceRate: 90.9,
                punctualityRate: 95.0,
                totalWorkHours: 160,
                overtimeHours: 8,
                averageWorkHours: 8
            });
        } catch (error) {
            console.error('Error fetching attendance report:', error);
            res.status(500).json({ error: 'Failed to fetch attendance report' });
        }
    });

    // Get performance metrics
    app.get("/api/reports/employee/:employeeId/performance", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const period = req.query.period as string;

            // Mock response - replace with actual implementation
            res.json({
                productivityScore: 85,
                attendanceScore: 90,
                punctualityScore: 95,
                overallScore: 90,
                improvements: ["C·∫£i thi·ªán gi·ªù ƒë·∫øn l√†m", "TƒÉng c∆∞·ªùng hi·ªáu su·∫•t c√¥ng vi·ªác"],
                achievements: ["Ho√†n th√†nh 100% nhi·ªám v·ª•", "Kh√¥ng v·∫Øng m·∫∑t kh√¥ng ph√©p"]
            });
        } catch (error) {
            console.error('Error fetching performance metrics:', error);
            res.status(500).json({ error: 'Failed to fetch performance metrics' });
        }
    });

    // Get monthly comparison
    app.get("/api/reports/employee/:employeeId/comparison", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const month = req.query.month as string;

            // Mock response - replace with actual implementation
            res.json({
                currentMonth: {
                    attendanceRate: 90.9,
                    punctualityRate: 95.0,
                    totalWorkHours: 160
                },
                previousMonth: {
                    attendanceRate: 87.5,
                    punctualityRate: 92.0,
                    totalWorkHours: 155
                },
                changes: {
                    attendanceRate: 3.4,
                    punctualityRate: 3.0,
                    workHours: 5
                }
            });
        } catch (error) {
            console.error('Error fetching monthly comparison:', error);
            res.status(500).json({ error: 'Failed to fetch monthly comparison' });
        }
    });

    // Export report
    app.get("/api/reports/employee/:employeeId/export", ensureAuthenticated, async (req, res) => {
        try {
            const employeeId = parseInt(req.params.employeeId);
            const month = req.query.month as string;

            // Mock response - replace with actual PDF generation
            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', `attachment; filename="attendance-report-${month}.pdf"`);
            res.send(Buffer.from('Mock PDF content'));
        } catch (error) {
            console.error('Error exporting report:', error);
            res.status(500).json({ error: 'Failed to export report' });
        }
    });

    // Get announcements
    app.get("/api/announcements", ensureAuthenticated, async (req, res) => {
        try {
            const limit = parseInt(req.query.limit as string) || 10;

            // Mock response - replace with actual implementation
            res.json([]);
        } catch (error) {
            console.error('Error fetching announcements:', error);
            res.status(500).json({ error: 'Failed to fetch announcements' });
        }
    });

    // Notifications endpoints

    // Get user notifications
    app.get("/api/notifications", ensureAuthenticated, async (req, res) => {
        try {
            const { filter, type, search } = req.query;

            // Mock response - replace with actual implementation
            res.json([
                {
                    id: 1,
                    title: "Th√¥ng b√°o ngh·ªâ l·ªÖ Qu·ªëc kh√°nh",
                    content: "C√¥ng ty th√¥ng b√°o l·ªãch ngh·ªâ l·ªÖ Qu·ªëc kh√°nh 2/9 t·ª´ ng√†y 2/9 ƒë·∫øn 4/9. To√†n th·ªÉ CBNV ngh·ªâ 3 ng√†y li√™n ti·∫øp.",
                    type: "announcement",
                    priority: "high",
                    isRead: false,
                    createdAt: new Date().toISOString(),
                    author: "Ph√≤ng Nh√¢n s·ª±",
                    department: "Nh√¢n s·ª±"
                },
                {
                    id: 2,
                    title: "C·∫≠p nh·∫≠t quy ƒë·ªãnh ch·∫•m c√¥ng",
                    content: "T·ª´ th√°ng 9, c√¥ng ty √°p d·ª•ng quy ƒë·ªãnh ch·∫•m c√¥ng m·ªõi. Nh√¢n vi√™n c·∫ßn ch·∫•m c√¥ng tr∆∞·ªõc 8h00 ƒë·ªÉ kh√¥ng b·ªã t√≠nh mu·ªôn.",
                    type: "info",
                    priority: "medium",
                    isRead: true,
                    createdAt: new Date(Date.now() - 86400000).toISOString(),
                    author: "Ban Gi√°m ƒë·ªëc",
                    department: "H√†nh ch√≠nh"
                }
            ]);
        } catch (error) {
            console.error('Error fetching notifications:', error);
            res.status(500).json({ error: 'Failed to fetch notifications' });
        }
    });

    // Mark notification as read
    app.post("/api/notifications/:id/mark-read", ensureAuthenticated, async (req, res) => {
        try {
            const notificationId = parseInt(req.params.id);

            // Mock response - replace with actual implementation
            res.json({ success: true });
        } catch (error) {
            console.error('Error marking notification as read:', error);
            res.status(500).json({ error: 'Failed to mark notification as read' });
        }
    });

    // Mark all notifications as read
    app.post("/api/notifications/mark-all-read", ensureAuthenticated, async (req, res) => {
        try {
            // Mock response - replace with actual implementation
            res.json({ success: true });
        } catch (error) {
            console.error('Error marking all notifications as read:', error);
            res.status(500).json({ error: 'Failed to mark all notifications as read' });
        }
    });

    // User Face Profile Email Verification Endpoints

    // Send OTP to user's email for face profile access
    app.post("/api/user/face-profile/send-otp", ensureAuthenticated, async (req, res) => {
        try {
            const { employeeId } = req.body;
            const userId = req.user?.id;

            if (!userId) {
                return res.status(401).json({ error: 'Not authenticated' });
            }

            console.log(`[UserFaceOTP] Sending OTP for employee ${employeeId}, user ${userId}`);

            // Ki·ªÉm tra quy·ªÅn - user ch·ªâ c√≥ th·ªÉ g·ª≠i OTP cho ch√≠nh h·ªç
            const currentEmployee = await storage.getEmployeeByUserId(userId);
            if (!currentEmployee || currentEmployee.id !== employeeId) {
                return res.status(403).json({ error: 'Unauthorized. You can only request OTP for your own profile' });
            }

            // L·∫•y th√¥ng tin employee ƒë·ªÉ c√≥ email
            const employee = await storage.getEmployee(employeeId);
            if (!employee || !employee.email) {
                return res.status(404).json({ error: 'Employee email not found' });
            }

            // T·∫°o OTP code 6 s·ªë
            const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
            const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 ph√∫t

            // L∆∞u OTP v√†o database (t·∫°m th·ªùi l∆∞u trong memory, n√™n chuy·ªÉn sang Redis ho·∫∑c DB)
            const otpKey = `user_face_otp_${employeeId}`;
            userFaceOtpStore.set(otpKey, {
                code: otpCode,
                email: employee.email,
                employeeId: employeeId,
                userId: userId,
                expiresAt: expiresAt,
                attempts: 0
            });

            // G·ª≠i email th·ª±c s·ª± thay v√¨ ch·ªâ log
            console.log("Sending user face OTP email to:", employee.email);
            await sendUserFaceAuthEmail(employee.email, otpCode, `${employee.firstName} ${employee.lastName}`);
            console.log("User face OTP email sent successfully");

            res.json({
                success: true,
                message: 'M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n',
                email: employee.email.replace(/(.{2}).*@/, '$1***@'), // ·∫®n m·ªôt ph·∫ßn email
                expiresIn: 10 * 60 // 10 ph√∫t t√≠nh b·∫±ng gi√¢y
            });

        } catch (error) {
            console.error('Error sending user face OTP:', error);
            res.status(500).json({ error: 'Failed to send OTP' });
        }
    });

    // Verify OTP for user face profile access
    app.post("/api/user/face-profile/verify-otp", ensureAuthenticated, async (req, res) => {
        try {
            const { employeeId, otpCode } = req.body;
            const userId = req.user?.id;

            if (!userId) {
                return res.status(401).json({ error: 'Not authenticated' });
            }

            console.log(`[UserFaceOTP] Verifying OTP for employee ${employeeId}, code: ${otpCode}`);

            // Ki·ªÉm tra quy·ªÅn
            const currentEmployee = await storage.getEmployeeByUserId(userId);
            if (!currentEmployee || currentEmployee.id !== employeeId) {
                return res.status(403).json({ error: 'Unauthorized' });
            }

            // L·∫•y OTP t·ª´ store
            const otpKey = `user_face_otp_${employeeId}`;
            const otpData = userFaceOtpStore.get(otpKey);

            if (!otpData) {
                return res.status(400).json({
                    error: 'M√£ OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n',
                    code: 'OTP_NOT_FOUND'
                });
            }

            // Ki·ªÉm tra h·∫øt h·∫°n
            if (new Date() > otpData.expiresAt) {
                userFaceOtpStore.delete(otpKey);
                return res.status(400).json({
                    error: 'M√£ OTP ƒë√£ h·∫øt h·∫°n',
                    code: 'OTP_EXPIRED'
                });
            }

            // Ki·ªÉm tra s·ªë l·∫ßn th·ª≠
            if (otpData.attempts >= 3) {
                userFaceOtpStore.delete(otpKey);
                return res.status(400).json({
                    error: 'ƒê√£ th·ª≠ qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi',
                    code: 'TOO_MANY_ATTEMPTS'
                });
            }

            // Ki·ªÉm tra m√£ OTP
            if (otpData.code !== otpCode) {
                otpData.attempts += 1;
                userFaceOtpStore.set(otpKey, otpData);

                const remainingAttempts = 3 - otpData.attempts;
                return res.status(400).json({
                    error: `M√£ OTP kh√¥ng ƒë√∫ng. C√≤n ${remainingAttempts} l·∫ßn th·ª≠`,
                    code: 'INVALID_OTP',
                    remainingAttempts: remainingAttempts
                });
            }

            // OTP ƒë√∫ng - t·∫°o access token
            const accessToken = Buffer.from(JSON.stringify({
                employeeId: employeeId,
                userId: userId,
                email: otpData.email,
                purpose: 'user_face_profile',
                issuedAt: Date.now(),
                expiresAt: Date.now() + 15 * 60 * 1000 // 15 ph√∫t
            })).toString('base64');

            // X√≥a OTP ƒë√£ s·ª≠ d·ª•ng
            userFaceOtpStore.delete(otpKey);

            console.log(`[UserFaceOTP] OTP verified successfully for employee ${employeeId}`);

            res.json({
                success: true,
                message: 'X√°c th·ª±c th√†nh c√¥ng',
                accessToken: accessToken,
                expiresIn: 15 * 60 // 15 ph√∫t
            });

        } catch (error) {
            console.error('Error verifying user face OTP:', error);
            res.status(500).json({ error: 'Failed to verify OTP' });
        }
    });

    // Validate access token for user face profile
    app.post("/api/user/face-profile/validate-token", ensureAuthenticated, async (req, res) => {
        try {
            const { accessToken } = req.body;
            const userId = req.user?.id;

            if (!accessToken) {
                return res.status(400).json({ error: 'Access token required' });
            }

            try {
                const tokenData = JSON.parse(Buffer.from(accessToken, 'base64').toString());

                // Ki·ªÉm tra h·∫øt h·∫°n
                if (Date.now() > tokenData.expiresAt) {
                    return res.status(401).json({
                        error: 'Access token ƒë√£ h·∫øt h·∫°n',
                        code: 'TOKEN_EXPIRED'
                    });
                }

                // Ki·ªÉm tra user
                if (tokenData.userId !== userId) {
                    return res.status(403).json({ error: 'Invalid token' });
                }

                // Ki·ªÉm tra purpose
                if (tokenData.purpose !== 'user_face_profile') {
                    return res.status(403).json({ error: 'Invalid token purpose' });
                }

                res.json({
                    valid: true,
                    employeeId: tokenData.employeeId,
                    email: tokenData.email,
                    expiresAt: tokenData.expiresAt
                });

            } catch (parseError) {
                return res.status(400).json({ error: 'Invalid token format' });
            }

        } catch (error) {
            console.error('Error validating user face token:', error);
            res.status(500).json({ error: 'Failed to validate token' });
        }
    });
} 